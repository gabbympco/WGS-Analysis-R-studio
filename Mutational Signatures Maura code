source("https://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("MutationalPatterns")

library("gridExtra")
library("MutationalPatterns")
library(RColorBrewer)
library(GenomicRanges)
library(GenomicFeatures)
library(BSgenome)
library("NMF")

#only do the following once... skip to line 21 if done so already
# follow this link to download hg38 reference genome, scroll down to bottom of page and download 'BSgenome.Hsapiens.UCSC.hg38_1.4.5.tar.gz': https://bioconductor.org/packages/release/data/annotation/html/BSgenome.Hsapiens.UCSC.hg38.html
#set working directory to location of hg38 genome you just downloaded
setwd("C:\\Users\\m280052\\Documents\\Gabby Heatmap")
#install hg38
install.packages("BSgenome.Hsapiens.UCSC.hg38_1.4.5.tar.gz", repos = NULL, type = "source")

library(BSgenome.Hsapiens.UCSC.hg38)
##################################

ref_genome <- BSgenome.Hsapiens.UCSC.hg38
##################################

cave_filter = ALL.samples.unfiltered.somatic.SNVs.only
colnames(cave_filter)<- c("Patient","CHROM","POS","REF","ALT")
cave_filter$chr<- paste("chr",cave_filter$CHROM,sep="")

alfa = with(cave_filter, GRanges(chr, IRanges(start=POS, end=POS)))

# annotate meta cols
values(alfa) <- cave_filter[,c("Patient","REF", "ALT")]
alfa
types = mut_type(alfa)

GenomeInfoDb::genome(alfa) = 'hg38'

context = mut_context(alfa, ref_genome)
alfa
type_context = type_context(alfa, ref_genome)

alfa
#### for each sample create GRange file in a list
g<- list()
list<- unique(cave_filter$Patient)
for(i in (1:length(list)))
{
  cave_filter_single<- cave_filter[cave_filter$Patient== list[i],]
  alfa_single<- with(cave_filter_single, GRanges(chr, IRanges(start=cave_filter_single$POS, end=cave_filter_single$POS), REF= REF, ALT=ALT))
  #write.table(cave_filter_single, sprintf("%s_cave.txt",list[i]), sep="\t", row.names = F, col.names = F, quote=F)
names(alfa_single)<- cave_filter_single$name
g[[i]]<- (alfa_single)
}

g[[i]]
names(g) <- list
list

GenomeInfoDb::genome(g[[i]]) = 'hg38'

type_occurrences <- mut_type_occurrences(g, ref_genome) ##### plot 6 classes and CpG prevalence
p1 = plot_spectrum(type_occurrences)
p2 = plot_spectrum(type_occurrences, CT = TRUE)
p3 = plot_spectrum(type_occurrences, CT = TRUE, legend = FALSE)
grid.arrange(p1, p2, p3, ncol=3, widths=c(3,3,1.75))
#########################

mut_mat <- mut_matrix(vcf_list = g, ref_genome = ref_genome)
plot_96_profile(mut_mat[,c(1,2)], ymax = 0.05) ############## plot 96 classes of first 2 samples
########################

mut_mat = mut_mat + 0.0001
estimate = nmf(mut_mat, rank=2:6, method="brunet", nrun=10, seed=123456)
plot(estimate)
########################


nmf_res <- extract_signatures(mut_mat, rank = 4) #### select best solution
colnames(nmf_res$signatures) <- c("Signature A", "Signature B", "Signature C", "Signature D")

setwd("C:\\Users\\m280052\\Documents\\michelson 4.6.23")
png("sig A B C D.png", units = "in", width = 12, height = 9, res = 300)

plot_96_profile(nmf_res$signatures, ymax = 0.05)

dev.off()

#######################
setwd("C:\\Users\\m280052\\Documents\\michelson 4.6.23")
png("sig contribution.4.png", units = "in", width = 12, height = 9, res = 300)

rownames(nmf_res$contribution) <- c("Signature A", "Signature B", "Signature C", "Signature D")
pc1 <- plot_contribution(nmf_res$contribution, nmf_res$signature, mode = "relative")
pc2 <- plot_contribution(nmf_res$contribution, nmf_res$signature, mode = "absolute")
grid.arrange(pc1, pc2)

dev.off()
######################

setwd("C:\\Users\\m280052\\Documents\\michelson 4.6.23")
png("sig clustering.4.png", units = "in", width = 12, height = 9, res = 300)
#### generate heatmap for patients clsutering
pch1 <- plot_contribution_heatmap(nmf_res$contribution)
pch2 <- plot_contribution_heatmap(nmf_res$contribution, cluster_samples=FALSE)
grid.arrange(pch1, pch2, ncol = 2, widths = c(2,1.6))
dev.off()

#####################

#Compare the reconstructed mutational profile with the original mutational profile:
  plot_compare_profiles(mut_mat[,1],
                        nmf_res$reconstructed[,1],
                        profile_names = c("Original", "Reconstructed"))
#####################

sp_url <- paste("http://cancer.sanger.ac.uk/cancergenome/assets/", "signatures_probabilities.txt", sep = "")
cancer_signatures = read.table(sp_url, sep = "\t", header = TRUE)
# Match the order of the mutation types to MutationalPatterns standard
new_order = match(row.names(mut_mat), cancer_signatures$Somatic.Mutation.Type)
# Reorder cancer signatures dataframe
cancer_signatures = cancer_signatures[as.vector(new_order),]
# Add trinucletiode changes names as row.names
row.names(cancer_signatures) = cancer_signatures$Somatic.Mutation.Type
# Keep only 96 contributions of the signatures in matrix
cancer_signatures = as.matrix(cancer_signatures[,4:33]) ###### all COSMIC Signatures (columns signatures, rows 96 classes)
#####################

setwd("C:\\Users\\m280052\\Documents\\michelson 4.6.23")
png("sig 30 cosmic.4.png", units = "in", width = 12, height = 9, res = 300)


mut_mat[,1:ncol(mut_mat)] = apply(mut_mat[,1:ncol(mut_mat)], 2, function(x) as.numeric(as.character(x)))
cancer_signatures[,1:ncol(cancer_signatures)] = apply(cancer_signatures[,1:ncol(cancer_signatures)], 2, function(x) as.numeric(as.character(x)))
fit_res <- fit_to_signatures(mut_mat, as.matrix(cancer_signatures))
plot_contribution(fit_res$contribution,
                  cancer_signatures[,1:ncol(cancer_signatures)],
                  coord_flip = FALSE,
                  mode = "absolute")
dev.off()

#####################
setwd("C:\\Users\\m280052\\Documents\\michelson 4.6.23")
png("sig 30 cosmic horizontal.4.png", units = "in", width = 12, height = 9, res = 300)

cancer_signatures_selected <- as.data.frame.matrix(cancer_signatures[,c(1,5,8,9)])
mut_mat[,1:ncol(mut_mat)] = apply(mut_mat[,1:ncol(mut_mat)], 2, function(x) as.numeric(as.character(x)))
cancer_signatures_selected[,1:ncol(cancer_signatures_selected)] = apply(cancer_signatures_selected[,1:ncol(cancer_signatures_selected)], 
                                                                        2, function(x) as.numeric(as.character(x)))
fit_res <- fit_to_signatures(mut_mat, as.matrix(cancer_signatures_selected))
plot_contribution(fit_res$contribution,
                  cancer_signatures[,1:ncol(cancer_signatures)],
                  coord_flip = T,
                  mode = "absolute")
dev.off()
